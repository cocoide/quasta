generator client {
  provider = "prisma-client-js"
  previewFeatures = ["views"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Comment{
  id   String    @id @default(cuid())
  comment String
  authorId String
  answerId String?
  answer Answer? @relation(fields: [answerId], references: [id])
  author User @relation(fields: [authorId], references: [id])
  createdAt         DateTime @default(now()) @map(name: "created_at")
  favoritedBy User[] @relation("FavoriteCommnet")
  @@map(name: "comment")
}

model Answer{
   id    String    @id @default(cuid())
   answer String @unique
   queryId String
   authorId String
   comments Comment[]
   favoritedBy User[] @relation("FavoriteAnswer")
  author  User @relation(fields: [authorId], references: [id])
  query Question @relation(fields: [queryId], references: [query])
  createdAt         DateTime @default(now()) @map(name: "created_at")
  @@map(name: "answer")
}

model Question{
 query String @unique
 authorId String
 author  User @relation(fields: [authorId], references: [id])
 createdAt         DateTime @default(now()) @map(name: "created_at")
 answer Answer[]
 @@map(name: "question")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  createdAt     DateTime  @default(now()) @map(name: "created_at")
  updatedAt     DateTime  @default(now()) @map(name: "updated_at")
  accounts Account[]
  sessions Session[]
  question Question[]
  answer Answer[]  
  comments Comment[]
  favorite_answers Answer[] @relation("FavoriteAnswer")
  favorite_comments Comment[] @relation("FavoriteCommnet")
  @@map(name: "users")
}

model Account {
  id                String   @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?  @db.Text
  access_token      String?  @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?  @db.Text
  session_state     String?
  createdAt         DateTime @default(now()) @map(name: "created_at")
  updatedAt         DateTime @default(now()) @map(name: "updated_at")
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  @@unique([provider, providerAccountId])
  @@map(name: "accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  @@map(name: "sessions")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime
  @@unique([identifier, token])
  @@map(name: "verification_tokens")
}